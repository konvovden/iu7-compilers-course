//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/konvovden/Study/10sem/iu7-compilers-course/src/Compiler/MiniJava.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniJavaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, INT=37, BOOL=38, ID=39, 
		WS=40, COMMENT=41, LINE_COMMENT=42;
	public const int
		RULE_goal = 0, RULE_mainClassDeclaration = 1, RULE_classDeclaration = 2, 
		RULE_mainClassBody = 3, RULE_mainMethod = 4, RULE_mainMethodDeclaration = 5, 
		RULE_classBody = 6, RULE_fieldDeclaration = 7, RULE_varDeclaration = 8, 
		RULE_methodDeclaration = 9, RULE_methodBody = 10, RULE_formalParameters = 11, 
		RULE_formalParameterList = 12, RULE_formalParameter = 13, RULE_type = 14, 
		RULE_statement = 15, RULE_expression = 16, RULE_methodArgumentList = 17, 
		RULE_intArrayType = 18, RULE_booleanType = 19, RULE_intType = 20;
	public static readonly string[] ruleNames = {
		"goal", "mainClassDeclaration", "classDeclaration", "mainClassBody", "mainMethod", 
		"mainMethodDeclaration", "classBody", "fieldDeclaration", "varDeclaration", 
		"methodDeclaration", "methodBody", "formalParameters", "formalParameterList", 
		"formalParameter", "type", "statement", "expression", "methodArgumentList", 
		"intArrayType", "booleanType", "intType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'extends'", "'{'", "'}'", "'public'", "'static'", "'void'", 
		"'main'", "'('", "'String'", "'['", "']'", "')'", "';'", "','", "'if'", 
		"'else'", "'while'", "'System.out.println'", "'='", "'return'", "'recur'", 
		"'?'", "':'", "'.'", "'length'", "'-'", "'!'", "'new'", "'int'", "'+'", 
		"'*'", "'<'", "'&&'", "'this'", "'boolean'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "INT", "BOOL", "ID", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniJava.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniJavaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniJavaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniJavaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GoalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainClassDeclarationContext mainClassDeclaration() {
			return GetRuleContext<MainClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniJavaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		public GoalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalContext goal() {
		GoalContext _localctx = new GoalContext(Context, State);
		EnterRule(_localctx, 0, RULE_goal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			mainClassDeclaration();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 43;
				classDeclaration();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainClassBodyContext mainClassBody() {
			return GetRuleContext<MainClassBodyContext>(0);
		}
		public MainClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainClassDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainClassDeclarationContext mainClassDeclaration() {
		MainClassDeclarationContext _localctx = new MainClassDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainClassDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(T__0);
			State = 52;
			Match(ID);
			State = 53;
			mainClassBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(T__0);
			State = 56;
			Match(ID);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 57;
				Match(T__1);
				State = 58;
				type();
				}
			}

			State = 61;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainMethodContext mainMethod() {
			return GetRuleContext<MainMethodContext>(0);
		}
		public MainClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainClassBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainClassBodyContext mainClassBody() {
		MainClassBodyContext _localctx = new MainClassBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_mainClassBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__2);
			State = 64;
			mainMethod();
			State = 65;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainMethodDeclarationContext mainMethodDeclaration() {
			return GetRuleContext<MainMethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MainMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainMethodContext mainMethod() {
		MainMethodContext _localctx = new MainMethodContext(Context, State);
		EnterRule(_localctx, 8, RULE_mainMethod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			mainMethodDeclaration();
			State = 68;
			Match(T__2);
			State = 69;
			statement();
			State = 70;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		public MainMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainMethodDeclarationContext mainMethodDeclaration() {
		MainMethodDeclarationContext _localctx = new MainMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_mainMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(T__4);
			State = 73;
			Match(T__5);
			State = 74;
			Match(T__6);
			State = 75;
			Match(T__7);
			State = 76;
			Match(T__8);
			State = 77;
			Match(T__9);
			State = 78;
			Match(T__10);
			State = 79;
			Match(T__11);
			State = 80;
			Match(ID);
			State = 81;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext[] fieldDeclaration() {
			return GetRuleContexts<FieldDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration(int i) {
			return GetRuleContext<FieldDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_classBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(T__2);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 84;
					fieldDeclaration();
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 619549032480L) != 0)) {
				{
				{
				State = 90;
				methodDeclaration();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			type();
			State = 99;
			Match(ID);
			State = 100;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_varDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			type();
			State = 103;
			Match(ID);
			State = 104;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 106;
				Match(T__4);
				State = 107;
				type();
				State = 108;
				Match(ID);
				State = 109;
				formalParameters();
				}
				break;
			case 2:
				{
				State = 111;
				type();
				State = 112;
				Match(ID);
				State = 113;
				formalParameters();
				//notifyErrorListeners("method declaration without public");
				}
				break;
			case 3:
				{
				State = 116;
				Match(T__4);
				State = 117;
				Match(ID);
				State = 118;
				formalParameters();
				//notifyErrorListeners("method declaration without return type");
				}
				break;
			case 4:
				{
				State = 121;
				Match(T__4);
				State = 122;
				type();
				State = 123;
				formalParameters();
				//notifyErrorListeners("method declaration without method name");
				}
				break;
			case 5:
				{
				State = 126;
				Match(T__4);
				State = 127;
				type();
				State = 128;
				Match(ID);
				//notifyErrorListeners("method declaration without argument list");
				}
				break;
			}
			State = 133;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext[] varDeclaration() {
			return GetRuleContexts<VarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration(int i) {
			return GetRuleContext<VarDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(T__2);
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 136;
					varDeclaration();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 142;
				statement();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 549762957320L) != 0) );
			State = 147;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 22, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(T__8);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 619549032448L) != 0)) {
				{
				State = 150;
				formalParameterList();
				}
			}

			State = 153;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 24, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			formalParameter();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 156;
				Match(T__14);
				State = 157;
				formalParameter();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			type();
			State = 164;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayTypeContext intArrayType() {
			return GetRuleContext<IntArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanTypeContext booleanType() {
			return GetRuleContext<BooleanTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeContext intType() {
			return GetRuleContext<IntTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_type);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				intArrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				booleanType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 168;
				intType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 169;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAssignStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfElseStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecurStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentListContext methodArgumentList() {
			return GetRuleContext<MethodArgumentListContext>(0);
		}
		public RecurStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecurStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public NestedStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		int _la;
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new NestedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				Match(T__2);
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549762957320L) != 0)) {
					{
					{
					State = 173;
					statement();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 179;
				Match(T__3);
				}
				break;
			case 2:
				_localctx = new IfElseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(T__15);
				State = 181;
				Match(T__8);
				State = 182;
				expression(0);
				State = 183;
				Match(T__12);
				State = 184;
				statement();
				State = 185;
				Match(T__16);
				State = 186;
				statement();
				}
				break;
			case 3:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 188;
				Match(T__17);
				State = 189;
				Match(T__8);
				State = 190;
				expression(0);
				State = 191;
				Match(T__12);
				State = 192;
				statement();
				}
				break;
			case 4:
				_localctx = new PrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 194;
				Match(T__18);
				State = 195;
				Match(T__8);
				State = 196;
				expression(0);
				State = 197;
				Match(T__12);
				State = 198;
				Match(T__13);
				}
				break;
			case 5:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 200;
				Match(ID);
				State = 201;
				Match(T__19);
				State = 202;
				expression(0);
				State = 203;
				Match(T__13);
				}
				break;
			case 6:
				_localctx = new ArrayAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 205;
				Match(ID);
				State = 206;
				Match(T__10);
				State = 207;
				expression(0);
				State = 208;
				Match(T__11);
				State = 209;
				Match(T__19);
				State = 210;
				expression(0);
				State = 211;
				Match(T__13);
				}
				break;
			case 7:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 213;
				Match(T__20);
				State = 214;
				expression(0);
				State = 215;
				Match(T__13);
				}
				break;
			case 8:
				_localctx = new RecurStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 217;
				Match(T__21);
				State = 218;
				expression(0);
				State = 219;
				Match(T__22);
				State = 220;
				methodArgumentList();
				State = 221;
				Match(T__23);
				State = 222;
				expression(0);
				State = 223;
				Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LtExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LtExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectInstantiationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		public ObjectInstantiationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectInstantiationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayInstantiationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInstantiationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInstantiationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniJavaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentListContext methodArgumentList() {
			return GetRuleContext<MethodArgumentListContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLitExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MiniJavaParser.BOOL, 0); }
		public BooleanLitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniJavaParser.INT, 0); }
		public IntLitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLengthExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLengthExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLengthExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MulExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new NegExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 228;
				Match(T__26);
				State = 229;
				expression(14);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 230;
				Match(T__27);
				State = 231;
				expression(13);
				}
				break;
			case 3:
				{
				_localctx = new ArrayInstantiationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 232;
				Match(T__28);
				State = 233;
				Match(T__29);
				State = 234;
				Match(T__10);
				State = 235;
				expression(0);
				State = 236;
				Match(T__11);
				}
				break;
			case 4:
				{
				_localctx = new ObjectInstantiationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 238;
				Match(T__28);
				State = 239;
				Match(ID);
				State = 240;
				Match(T__8);
				State = 241;
				Match(T__12);
				}
				break;
			case 5:
				{
				_localctx = new IntLitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 242;
				Match(INT);
				}
				break;
			case 6:
				{
				_localctx = new BooleanLitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 243;
				Match(BOOL);
				}
				break;
			case 7:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				Match(ID);
				}
				break;
			case 8:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				Match(T__34);
				}
				break;
			case 9:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				Match(T__8);
				State = 247;
				expression(0);
				State = 248;
				Match(T__12);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 279;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 252;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 253;
						Match(T__30);
						State = 254;
						expression(11);
						}
						break;
					case 2:
						{
						_localctx = new SubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 255;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 256;
						Match(T__26);
						State = 257;
						expression(10);
						}
						break;
					case 3:
						{
						_localctx = new MulExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 258;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 259;
						Match(T__31);
						State = 260;
						expression(9);
						}
						break;
					case 4:
						{
						_localctx = new LtExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 261;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 262;
						Match(T__32);
						State = 263;
						expression(8);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 264;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 265;
						Match(T__33);
						State = 266;
						expression(7);
						}
						break;
					case 6:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 267;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 268;
						Match(T__10);
						State = 269;
						expression(0);
						State = 270;
						Match(T__11);
						}
						break;
					case 7:
						{
						_localctx = new ArrayLengthExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 272;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 273;
						Match(T__24);
						State = 274;
						Match(T__25);
						}
						break;
					case 8:
						{
						_localctx = new MethodCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 275;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 276;
						Match(T__24);
						State = 277;
						Match(ID);
						State = 278;
						methodArgumentList();
						}
						break;
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MethodArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MethodArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentListContext methodArgumentList() {
		MethodArgumentListContext _localctx = new MethodArgumentListContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(T__8);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 997371937280L) != 0)) {
				{
				State = 285;
				expression(0);
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 286;
					Match(T__14);
					State = 287;
					expression(0);
					}
					}
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 295;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntArrayTypeContext : ParserRuleContext {
		public IntArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intArrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntArrayTypeContext intArrayType() {
		IntArrayTypeContext _localctx = new IntArrayTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_intArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(T__29);
			State = 298;
			Match(T__10);
			State = 299;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanTypeContext : ParserRuleContext {
		public BooleanTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanTypeContext booleanType() {
		BooleanTypeContext _localctx = new BooleanTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_booleanType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeContext : ParserRuleContext {
		public IntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniJavaVisitor<TResult> typedVisitor = visitor as IMiniJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeContext intType() {
		IntTypeContext _localctx = new IntTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_intType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 16);
		case 7: return Precpred(Context, 15);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,306,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,5,
		0,45,8,0,10,0,12,0,48,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,
		60,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,5,6,86,8,6,10,6,12,6,89,9,6,1,6,5,6,92,
		8,6,10,6,12,6,95,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,3,9,132,8,9,1,9,1,9,1,10,1,10,5,10,138,8,10,10,10,
		12,10,141,9,10,1,10,4,10,144,8,10,11,10,12,10,145,1,10,1,10,1,11,1,11,
		3,11,152,8,11,1,11,1,11,1,12,1,12,1,12,5,12,159,8,12,10,12,12,12,162,9,
		12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,171,8,14,1,15,1,15,5,15,175,
		8,15,10,15,12,15,178,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,226,8,15,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,251,8,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,280,8,16,10,16,12,16,283,
		9,16,1,17,1,17,1,17,1,17,5,17,289,8,17,10,17,12,17,292,9,17,3,17,294,8,
		17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,0,1,32,21,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,0,325,0,42,1,
		0,0,0,2,51,1,0,0,0,4,55,1,0,0,0,6,63,1,0,0,0,8,67,1,0,0,0,10,72,1,0,0,
		0,12,83,1,0,0,0,14,98,1,0,0,0,16,102,1,0,0,0,18,131,1,0,0,0,20,135,1,0,
		0,0,22,149,1,0,0,0,24,155,1,0,0,0,26,163,1,0,0,0,28,170,1,0,0,0,30,225,
		1,0,0,0,32,250,1,0,0,0,34,284,1,0,0,0,36,297,1,0,0,0,38,301,1,0,0,0,40,
		303,1,0,0,0,42,46,3,2,1,0,43,45,3,4,2,0,44,43,1,0,0,0,45,48,1,0,0,0,46,
		44,1,0,0,0,46,47,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,5,0,0,1,50,
		1,1,0,0,0,51,52,5,1,0,0,52,53,5,39,0,0,53,54,3,6,3,0,54,3,1,0,0,0,55,56,
		5,1,0,0,56,59,5,39,0,0,57,58,5,2,0,0,58,60,3,28,14,0,59,57,1,0,0,0,59,
		60,1,0,0,0,60,61,1,0,0,0,61,62,3,12,6,0,62,5,1,0,0,0,63,64,5,3,0,0,64,
		65,3,8,4,0,65,66,5,4,0,0,66,7,1,0,0,0,67,68,3,10,5,0,68,69,5,3,0,0,69,
		70,3,30,15,0,70,71,5,4,0,0,71,9,1,0,0,0,72,73,5,5,0,0,73,74,5,6,0,0,74,
		75,5,7,0,0,75,76,5,8,0,0,76,77,5,9,0,0,77,78,5,10,0,0,78,79,5,11,0,0,79,
		80,5,12,0,0,80,81,5,39,0,0,81,82,5,13,0,0,82,11,1,0,0,0,83,87,5,3,0,0,
		84,86,3,14,7,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,
		88,93,1,0,0,0,89,87,1,0,0,0,90,92,3,18,9,0,91,90,1,0,0,0,92,95,1,0,0,0,
		93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,5,4,0,0,
		97,13,1,0,0,0,98,99,3,28,14,0,99,100,5,39,0,0,100,101,5,14,0,0,101,15,
		1,0,0,0,102,103,3,28,14,0,103,104,5,39,0,0,104,105,5,14,0,0,105,17,1,0,
		0,0,106,107,5,5,0,0,107,108,3,28,14,0,108,109,5,39,0,0,109,110,3,22,11,
		0,110,132,1,0,0,0,111,112,3,28,14,0,112,113,5,39,0,0,113,114,3,22,11,0,
		114,115,6,9,-1,0,115,132,1,0,0,0,116,117,5,5,0,0,117,118,5,39,0,0,118,
		119,3,22,11,0,119,120,6,9,-1,0,120,132,1,0,0,0,121,122,5,5,0,0,122,123,
		3,28,14,0,123,124,3,22,11,0,124,125,6,9,-1,0,125,132,1,0,0,0,126,127,5,
		5,0,0,127,128,3,28,14,0,128,129,5,39,0,0,129,130,6,9,-1,0,130,132,1,0,
		0,0,131,106,1,0,0,0,131,111,1,0,0,0,131,116,1,0,0,0,131,121,1,0,0,0,131,
		126,1,0,0,0,132,133,1,0,0,0,133,134,3,20,10,0,134,19,1,0,0,0,135,139,5,
		3,0,0,136,138,3,16,8,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,
		139,140,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,142,144,3,30,15,0,143,
		142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,147,1,
		0,0,0,147,148,5,4,0,0,148,21,1,0,0,0,149,151,5,9,0,0,150,152,3,24,12,0,
		151,150,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,5,13,0,0,154,23,
		1,0,0,0,155,160,3,26,13,0,156,157,5,15,0,0,157,159,3,26,13,0,158,156,1,
		0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,25,1,0,0,0,162,
		160,1,0,0,0,163,164,3,28,14,0,164,165,5,39,0,0,165,27,1,0,0,0,166,171,
		3,36,18,0,167,171,3,38,19,0,168,171,3,40,20,0,169,171,5,39,0,0,170,166,
		1,0,0,0,170,167,1,0,0,0,170,168,1,0,0,0,170,169,1,0,0,0,171,29,1,0,0,0,
		172,176,5,3,0,0,173,175,3,30,15,0,174,173,1,0,0,0,175,178,1,0,0,0,176,
		174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,226,5,
		4,0,0,180,181,5,16,0,0,181,182,5,9,0,0,182,183,3,32,16,0,183,184,5,13,
		0,0,184,185,3,30,15,0,185,186,5,17,0,0,186,187,3,30,15,0,187,226,1,0,0,
		0,188,189,5,18,0,0,189,190,5,9,0,0,190,191,3,32,16,0,191,192,5,13,0,0,
		192,193,3,30,15,0,193,226,1,0,0,0,194,195,5,19,0,0,195,196,5,9,0,0,196,
		197,3,32,16,0,197,198,5,13,0,0,198,199,5,14,0,0,199,226,1,0,0,0,200,201,
		5,39,0,0,201,202,5,20,0,0,202,203,3,32,16,0,203,204,5,14,0,0,204,226,1,
		0,0,0,205,206,5,39,0,0,206,207,5,11,0,0,207,208,3,32,16,0,208,209,5,12,
		0,0,209,210,5,20,0,0,210,211,3,32,16,0,211,212,5,14,0,0,212,226,1,0,0,
		0,213,214,5,21,0,0,214,215,3,32,16,0,215,216,5,14,0,0,216,226,1,0,0,0,
		217,218,5,22,0,0,218,219,3,32,16,0,219,220,5,23,0,0,220,221,3,34,17,0,
		221,222,5,24,0,0,222,223,3,32,16,0,223,224,5,14,0,0,224,226,1,0,0,0,225,
		172,1,0,0,0,225,180,1,0,0,0,225,188,1,0,0,0,225,194,1,0,0,0,225,200,1,
		0,0,0,225,205,1,0,0,0,225,213,1,0,0,0,225,217,1,0,0,0,226,31,1,0,0,0,227,
		228,6,16,-1,0,228,229,5,27,0,0,229,251,3,32,16,14,230,231,5,28,0,0,231,
		251,3,32,16,13,232,233,5,29,0,0,233,234,5,30,0,0,234,235,5,11,0,0,235,
		236,3,32,16,0,236,237,5,12,0,0,237,251,1,0,0,0,238,239,5,29,0,0,239,240,
		5,39,0,0,240,241,5,9,0,0,241,251,5,13,0,0,242,251,5,37,0,0,243,251,5,38,
		0,0,244,251,5,39,0,0,245,251,5,35,0,0,246,247,5,9,0,0,247,248,3,32,16,
		0,248,249,5,13,0,0,249,251,1,0,0,0,250,227,1,0,0,0,250,230,1,0,0,0,250,
		232,1,0,0,0,250,238,1,0,0,0,250,242,1,0,0,0,250,243,1,0,0,0,250,244,1,
		0,0,0,250,245,1,0,0,0,250,246,1,0,0,0,251,281,1,0,0,0,252,253,10,10,0,
		0,253,254,5,31,0,0,254,280,3,32,16,11,255,256,10,9,0,0,256,257,5,27,0,
		0,257,280,3,32,16,10,258,259,10,8,0,0,259,260,5,32,0,0,260,280,3,32,16,
		9,261,262,10,7,0,0,262,263,5,33,0,0,263,280,3,32,16,8,264,265,10,6,0,0,
		265,266,5,34,0,0,266,280,3,32,16,7,267,268,10,17,0,0,268,269,5,11,0,0,
		269,270,3,32,16,0,270,271,5,12,0,0,271,280,1,0,0,0,272,273,10,16,0,0,273,
		274,5,25,0,0,274,280,5,26,0,0,275,276,10,15,0,0,276,277,5,25,0,0,277,278,
		5,39,0,0,278,280,3,34,17,0,279,252,1,0,0,0,279,255,1,0,0,0,279,258,1,0,
		0,0,279,261,1,0,0,0,279,264,1,0,0,0,279,267,1,0,0,0,279,272,1,0,0,0,279,
		275,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,33,1,0,
		0,0,283,281,1,0,0,0,284,293,5,9,0,0,285,290,3,32,16,0,286,287,5,15,0,0,
		287,289,3,32,16,0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,
		291,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,293,285,1,0,0,0,293,294,1,
		0,0,0,294,295,1,0,0,0,295,296,5,13,0,0,296,35,1,0,0,0,297,298,5,30,0,0,
		298,299,5,11,0,0,299,300,5,12,0,0,300,37,1,0,0,0,301,302,5,36,0,0,302,
		39,1,0,0,0,303,304,5,30,0,0,304,41,1,0,0,0,17,46,59,87,93,131,139,145,
		151,160,170,176,225,250,279,281,290,293
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
